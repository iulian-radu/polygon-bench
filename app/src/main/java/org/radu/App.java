/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.radu;

import io.polygon.kotlin.sdk.rest.PolygonRestApiCallback;
import io.polygon.kotlin.sdk.rest.PolygonRestClient;
import io.polygon.kotlin.sdk.rest.reference.SupportedTickersParametersBuilder;
import io.polygon.kotlin.sdk.rest.reference.TickersDTO;
import okhttp3.*;
import org.apache.commons.math3.stat.Frequency;
import org.jetbrains.annotations.NotNull;

import java.io.IOException;
import java.util.concurrent.CountDownLatch;
import java.util.function.Function;

public class App {
    public static void main(String[] args) throws InterruptedException, IOException {
        var key = System.getenv("POLYGON_API_KEY");
        benchmark(new PolygonRestClient(key), "Default client");
        benchmark(new PolygonRestClient(key, new CustomApacheProvider()), "Apache client - 1000 threads");
        benchmark(new PolygonRestClient(key, new CustomCIOProvider()), "CIO client - 1000 threads");
        benchmark(new PolygonRestClient(key, new OkHttpProvider()), "OkHttp client - 1000 threads");

        benchmarkRawOkHttp(key);
    }


    private static void benchmark(PolygonRestClient client, String clientDescription) throws InterruptedException {
        var refClient = client.getReferenceClient();
        var params = new SupportedTickersParametersBuilder().tickersPerPage(200).page(1).build();
//        var result = refClient.getSupportedTickersBlocking(new SupportedTickersParametersBuilder().page(1).tickersPerPage(1).build());
        var numPages = 100; //(result.getCount() / params.getTickersPerPage()) + 1;
        var latch = new CountDownLatch(numPages);
        Frequency frequency = new Frequency();
        Function<Long, PolygonRestApiCallback<TickersDTO>> getCallback =
                (Long timestamp) -> new PolygonRestApiCallback<TickersDTO>() {
            public void onError(Throwable throwable) {
                computeDuration();
                latch.countDown();
                System.out.println("Error for page ???" + throwable);
            }

            public long computeDuration() {
                var end = System.currentTimeMillis();
                var time = (end - timestamp) / 100;
                frequency.addValue(time);
                return time;
            }

            public void onSuccess(TickersDTO t) {
                computeDuration();
                latch.countDown();
              //  System.out.println("Fetched page " + t.getPage());
            }
        };
        {
            var startTime = System.nanoTime();
            for (int i = 1; i <= numPages; ++i) {
                var pars = new SupportedTickersParametersBuilder(params).page(i).build();
                var callback = getCallback.apply(System.currentTimeMillis());
                refClient.getSupportedTickers(pars, callback);
            }
            latch.await();
            var endTime = System.nanoTime();
            System.out.println(clientDescription + " (async) took " + (endTime - startTime) / 1000000.0 + " ms");
            frequency.entrySetIterator().forEachRemaining(e -> System.out.println(e.getKey() + "00ms --> " + e.getValue()));
        }
        {
            frequency.clear();
            var startTime = System.nanoTime();

            // reduced this to only 10 pages, as it takes a lot of time
            for (int i = 1; i <= 10; ++i) {
                var pars = new SupportedTickersParametersBuilder(params).page(i).build();
                var start = System.currentTimeMillis();
                refClient.getSupportedTickersBlocking(pars);
                var end = System.currentTimeMillis();
                var time = (end - start) / 100;
                frequency.addValue(time);
            }
            var endTime = System.nanoTime();
            System.out.println(clientDescription + " (sync) took " + (endTime - startTime) / 1000000.0 + " ms");
            frequency.entrySetIterator().forEachRemaining(e -> System.out.println(e.getKey() + "00ms --> " + e.getValue()));
        }
    }

    private static Request getRequestForPage(int page, String key) {
        return new okhttp3.Request.Builder()
                .url("https://api.polygon.io/v2/reference/tickers?perpage=200&page=" + page + "&apiKey=" + key)
                .build();
    }

    private static void benchmarkRawOkHttp(String key) throws InterruptedException, IOException {
        var dispatcher = new Dispatcher();
        dispatcher.setMaxRequests(1000);
        dispatcher.setMaxRequestsPerHost(1000);
        var okHttpClient = new OkHttpClient.Builder()
                .dispatcher(dispatcher)
                .retryOnConnectionFailure(true)
                .build();

        int numPages = 100;

        var latch = new CountDownLatch(numPages);
        Frequency frequency = new Frequency();
        Function<Long, Callback> getCallback =
                (Long timestamp) -> new Callback() {
                    @Override
                    public void onFailure(@NotNull Call call, @NotNull IOException e) {
                        computeDuration();
                        latch.countDown();
                        System.out.println("Error for page ???" + e);
                    }

                    public long computeDuration() {
                        var end = System.currentTimeMillis();
                        var time = (end - timestamp) / 100;
                        frequency.addValue(time);
                        return time;
                    }

                    @Override
                    public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                        computeDuration();
                        latch.countDown();
                        //  System.out.println("Fetched page " + t.getPage());
                    }
                };
        {
            var startTime = System.nanoTime();
            for (int i = 1; i <= numPages; ++i) {
                okHttpClient.newCall(getRequestForPage(i, key)).enqueue(getCallback.apply(System.currentTimeMillis()));
            }
            latch.await();
            var endTime = System.nanoTime();
            System.out.println("Direct OkHttp call " + " (async) took " + (endTime - startTime) / 1000000.0 + " ms");
            frequency.entrySetIterator().forEachRemaining(e -> System.out.println(e.getKey() + "00ms --> " + e.getValue()));
        }
        {
            frequency.clear();
            var startTime = System.nanoTime();

            // reduced this to only 10 pages, as it takes a lot of time
            for (int i = 1; i <= 10; ++i) {
                var start = System.currentTimeMillis();
                okHttpClient.newCall(getRequestForPage(i, key)).execute();
                var end = System.currentTimeMillis();
                var time = (end - start) / 100;
                frequency.addValue(time);
            }
            var endTime = System.nanoTime();
            System.out.println("Direct OkHttp call " + " (sync) took " + (endTime - startTime) / 1000000.0 + " ms");
            frequency.entrySetIterator().forEachRemaining(e -> System.out.println(e.getKey() + "00ms --> " + e.getValue()));
        }

    }

}
